---
import type { PlainDateTimeProps } from "./types"

import { Intl, Temporal } from "temporal-polyfill"

import mapAttributes from "../../../utilities/mapAttributes"

import { DEFAULT_CALENDAR, DEFAULT_DATE_TIME_OPTIONS } from "../constants"
import { DEFAULT_LOCALES } from "../../constants"

const {
	calendar = DEFAULT_CALENDAR,
	dataset,
	day,
	era,
	eraYear,
	hour = 0,
	locales = DEFAULT_LOCALES,
	microsecond = 0,
	millisecond = 0,
	minute = 0,
	month,
	monthCode,
	nanosecond = 0,
	options = {},
	plainDateTime = Temporal.Now.plainDateTime(
		Astro.props.calendar || DEFAULT_CALENDAR,
	),
	property = "temporal",
	second = 0,
	useMicrodata,
	year,
	...attrs
} = Astro.props as PlainDateTimeProps

const attributes = mapAttributes(attrs, ["plain-date-time"])

const val = day
	? ({
			calendar,
			day,
			hour: Number(hour),
			microsecond: Number(microsecond),
			millisecond: Number(millisecond),
			minute: Number(minute),
			...(monthCode ? { monthCode } : { month }),
			nanosecond: Number(nanosecond),
			second: Number(second),
			...(era ? { era, eraYear } : { year }),
		} as Temporal.PlainDateTimeLike)
	: (plainDateTime as Temporal.PlainDateTime)

const value = Temporal.PlainDateTime.from(val)

const opts = {
	...DEFAULT_DATE_TIME_OPTIONS,
	calendar: value.calendarId.toString(),
	...options,
}

const label = new Intl.DateTimeFormat(locales, opts).format(value)

const [itemscope, itemtype, itemprop] = useMicrodata
	? [true, "https://schema.org/DateTime", property]
	: []
---

<time
	{itemprop}
	{itemscope}
	{itemtype}
	{...attributes}
	datetime={value.toJSON()}
>
	{label}
</time>
