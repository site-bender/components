---
import type { PlainMonthDayProps } from "./types"
import type { DateTimeFormatOptions } from "../../../types"

import { Intl, Temporal } from "temporal-polyfill"

import mapAttributes from "../../../utilities/mapAttributes"

import { DEFAULT_CALENDAR, DEFAULT_MONTH_DAY_OPTIONS } from "../constants"
import { DEFAULT_LOCALES } from "../../constants"

const {
	calendar = DEFAULT_CALENDAR,
	day,
	locales = DEFAULT_LOCALES,
	month,
	monthCode,
	options = {} as DateTimeFormatOptions,
	plainMonthDay = Temporal.PlainMonthDay.from(
		Temporal.Now.plainDate(Astro.props.calendar || DEFAULT_CALENDAR),
	),
	property = "temporal",
	useMicrodata,
	year,
	...attrs
} = Astro.props as PlainMonthDayProps

const attributes = mapAttributes(attrs, ["plain-month-day"])

const val =
	plainMonthDay ||
	({
		calendar,
		day,
		...(monthCode ? { monthCode } : { month }),
		...(year ? { year } : {}),
	} as Temporal.PlainMonthDayLike)

const value = Temporal.PlainMonthDay.from(val)

const opts = {
	...DEFAULT_MONTH_DAY_OPTIONS,
	...options,
	calendar: value.calendarId.toString(),
}

const label = new Intl.DateTimeFormat(locales, opts).format(value)

const [itemscope, itemtype, itemprop] = useMicrodata
	? [true, "https://schema.org/Date", property]
	: []
---

<time
	{itemprop}
	{itemscope}
	{itemtype}
	{...attributes}
	datetime={value.toString()}
>
	{label}
</time>
